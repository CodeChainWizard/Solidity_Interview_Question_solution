{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red172\green172\blue193;\red79\green123\blue61;\red26\green26\blue41;
\red70\green137\blue204;\red212\green212\blue212;\red167\green197\blue152;\red45\green175\blue118;\red31\green133\blue64;
\red194\green126\blue101;\red140\green108\blue11;\red13\green102\blue149;\red187\green97\blue44;}
{\*\expandedcolortbl;;\cssrgb\c72941\c73333\c80000;\cssrgb\c37647\c54510\c30588;\cssrgb\c13333\c13725\c21176;
\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c19608\c72941\c53725;\cssrgb\c12941\c58039\c31765;
\cssrgb\c80784\c56863\c47059;\cssrgb\c61961\c49412\c3137;\cssrgb\c0\c47843\c65098;\cssrgb\c78824\c45882\c22353;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 /* Question 2\cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 SafeMath is a commonly used library in solidity to prevent vulnerabilities associated with arithmetic operation is smart contracts.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 In the context of SafeMath, discuss the signification of the sub function an its role is secure contract developments,\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 why is it crucial to use sub when performing subtraction operations with unsigned integers (uint256)? Additionally,\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 explain the purpose of the error message "SafeMath: sunstract overflow" and how it contribustions to the contract security.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 Can you provide an example scenario where the absence of SafeMath is subtractions could lead to vulnerabilities in the smart\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 contract.\cf2 \cb1 \strokec2 \
\
\
\cf3 \cb4 \strokec3 ---> Important Points\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3     (1) Safe Subtraction.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3     (2) Error Message on UnderFlow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3     (3) Revert on UnderFlow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3     (4) Secure Contract Development\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 */\cf2 \cb1 \strokec2 \
\
\
\cf3 \cb4 \strokec3 // SPDX-License-Identifier: GPL-3.0\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb4 \strokec5 pragma\cf2 \strokec2  \cf5 \strokec5 solidity\cf2 \strokec2  \cf6 \strokec6 >=\cf7 \strokec7 0.8.2\cf2 \strokec2  \cf6 \strokec6 <\cf7 \strokec7 0.9.0\cf6 \strokec6 ;\cf2 \cb1 \strokec2 \
\
\cf5 \cb4 \strokec5 library\cf2 \strokec2  SafeMath\cf6 \strokec6 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  sub\cf6 \strokec6 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf6 \strokec6 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf6 \strokec6 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf9 \strokec9 returns\cf2 \strokec2  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 return\cf2 \strokec2  sub\cf6 \strokec6 (\cf2 \strokec2 a\cf6 \strokec6 ,\cf2 \strokec2  b\cf6 \strokec6 ,\cf2 \strokec2  \cf10 \strokec10 "SafeMath: substraction overflow"\cf6 \strokec6 );\cf2 \cb1 \strokec2 \
\cb4     \cf6 \strokec6 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  sub\cf6 \strokec6 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf6 \strokec6 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf6 \strokec6 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf11 \strokec11 memory\cf2 \strokec2  errorMsg\cf6 \strokec6 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf9 \strokec9 returns\cf2 \strokec2  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\{\cf2 \cb1 \strokec2 \
\cb4         \cf12 \strokec12 require\cf6 \strokec6 (\cf2 \strokec2 b \cf6 \strokec6 <=\cf2 \strokec2  a\cf6 \strokec6 ,\cf2 \strokec2  errorMsg\cf6 \strokec6 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  c \cf6 \strokec6 =\cf2 \strokec2  a\cf6 \strokec6 -\cf2 \strokec2 b\cf6 \strokec6 ;\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 return\cf2 \strokec2  c\cf6 \strokec6 ;\cf2 \cb1 \strokec2 \
\cb4     \cf6 \strokec6 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb4 \strokec6 \}\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb4 \strokec5 contract\cf2 \strokec2  SubContract \cf6 \strokec6 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 using\cf2 \strokec2  SafeMath \cf13 \strokec13 for\cf2 \strokec2  \cf5 \strokec5 uint256\cf6 \strokec6 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safeSub\cf6 \strokec6 (\cf5 \strokec5 uint256\cf2 \strokec2  x\cf6 \strokec6 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  y\cf6 \strokec6 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf9 \strokec9 returns\cf2 \strokec2  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 return\cf2 \strokec2  x\cf6 \strokec6 .\cf2 \strokec2 sub\cf6 \strokec6 (\cf2 \strokec2 y\cf6 \strokec6 );\cf2 \cb1 \strokec2 \
\cb4     \cf6 \strokec6 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb4 \strokec6 \}\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 // When this lib is not use then show an this type of problem.\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb4 \strokec5 contract\cf2 \strokec2  withOutSub\cf6 \strokec6 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 uint256\cf2 \strokec2  balance \cf6 \strokec6 =\cf2 \strokec2  \cf7 \strokec7 100\cf6 \strokec6 ;\cf2 \strokec2  \cf3 \strokec3 // token balance\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safeSub\cf6 \strokec6 (\cf5 \strokec5 uint256\cf2 \strokec2  x\cf6 \strokec6 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf9 \strokec9 returns\cf2 \strokec2  \cf6 \strokec6 (\cf5 \strokec5 uint256\cf6 \strokec6 )\cf2 \strokec2  \cf6 \strokec6 \{\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // Substract without safe hb using..\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  newBalance \cf6 \strokec6 =\cf2 \strokec2  balance \cf6 \strokec6 -\cf2 \strokec2  x\cf6 \strokec6 ;\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 return\cf2 \strokec2  newBalance\cf6 \strokec6 ;\cf2 \cb1 \strokec2 \
\cb4     \cf6 \strokec6 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb4 \strokec6 \}\cf2 \cb1 \strokec2 \
\
}